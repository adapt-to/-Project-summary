=============
随机频率的时钟触发
=============

1. 需求原因
===========

 1. 在原有的基础上，利用随机的时钟脉冲触发伪随机数的产生，从而输出更加具有随机性的随机电平值
 2. 增加了传输的保密性
 3. 对于其他也需要用到随机电平或者随机时钟的工作可以据此思想上改进优化，具有先导性意义

2. 预期目标
===========

 1. 实现随机的CLK时钟脉冲（频率随机，持续时间随机）
 2. 触发时钟频率需要小于等于5Mhz（受限于随机电平的输出频率）
 3. 保证能够在上升沿触发伪随机数的产生
 4. 待补充

3. 实现构思
============

由于网上并未有与此相关的实现方案和思想，故以下思考仅为个人观点，如有错误请谅解。
 
 1. 利用FPGA最基础的分频器原理，通过控制分频器的分频数数值的大小进而改变输出频率的大小
 2. 利用随机门控时钟实现，通过门控信号控制是否开门或者关门
 3. 利用ROM随机选择，在ROM中存储二值化数据0和1，随机选取输出0或者1

 这里通过分析，最后决定采用第1种方案，具体的方案分析详见 `本项目2018年11月20日志 <http://119.23.36.28/>`_

4. 实际实现
==================

.. note:: 

 **模块拆分**
   
   顶层模块包括：
     1. 伪随机数产生模块
     2. 锁相环模块
     3. 采样模块
     4. 基础分频器模块
   
   测试模块包括：
     1. testbench

具体实现步骤：

 1. 实现基础的分频器程序： 能够通过所给的数值进行分频（注：数值为正整数）
 2. 实现伪随机码的输出（四位二进制数构成的15个状态码 由1~15）
    状态转移图如下：

     .. image:: ./zhuangtaitu.png
    
    仿真图如下：

     .. image:: ./suiji.png

 3. 实现伪随机数和基础分频器的对接（满足分频数和伪随机数的位宽一致；满足频率匹配以避免时钟的冲突）
     
    随机时钟输出仿真波形如下：

     .. image:: ./random_clk.png
    
    实际示波器波形如下：
    
     .. image:: ./shiji.png

    .. note:: 
     ** 为什么要满足位宽一致？ **

     由于伪随机数的输出位宽为4位，若分频器的输入位宽为32位，那么不能进行位宽匹配，FPGA不能识别输入到底是多少，就会出现没有波形输出的现象。
     所以将分频器的分频数设置为4位位宽即可。

     这里的位宽可以自己设置，只要能够满足两者一致的要求以及FPGA的硬件要求，设置多少位都可以。

    .. note:: 
     ** 为什么要满足频率匹配？ **

     这里的频率匹配是指，伪随机数产生的频率和分频器的原始输入时钟的频率。
    
     首先知道，分频器是对FPGA的固有时钟50MHZ进行分频，其次，伪随机数的产生频率决定着分频器每一次分频的快慢。（因为这里的随机数就是分频数，随机数为几就是几分频）。
     由于本次设置随机数最大为二进制的1111，即15，所以最大为15分频。最大分频数对应的频率为 50Mhz/15 = 3.333Mhz

     所以为了满足至少能够完成分频一个周期，伪随机数的产生频率要小于等于上述最大分频数所对应的频率，故此次我设置频率为3Mhz，随机数产生的仿真波形图片已在上述中给出。
     这也就是频率匹配的原因

5. 思考
================

1. 虽然实际示波器中的图像不是理想的方波信号，考虑可能是硬件本身受限，毕竟不断变化它的频率势必会对波形造成变形等结果。不过好在这个随机的时钟波形仅是用于边沿触发随机数产生以达到控制随机电平的输出的作用，所以只要它能在边沿得到识别并触发处随机数即可。（该现象待验证）

2. 虽然实现了随机的时钟输出，但是随机频率的时钟输出，最终还是由输入的伪随机数决定的，而伪随机数在硬件FPGA中实现必须要依靠时钟边沿触发，所以这里就产生了一个矛盾点：

    1. 当初是为了避免伪随机数在随机电平中由于固定频率的时钟产生的可能具有规律性的弊端，才想要实现随机的时钟来产生控制电平的伪随机数，
    2. 但是这个随机的时钟却也是由一个固定频率的时钟触发伪随机数产生的。

3. 后续进行联合验证实验，即将此随机时钟代码和随机电平代码整合验证。
